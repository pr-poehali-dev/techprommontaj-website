'''
Business: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ Telegram Bot API
Args: event - dict —Å httpMethod, body (name, phone, message)
      context - –æ–±—ä–µ–∫—Ç —Å request_id
Returns: HTTP response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
'''

import json
import urllib.request
import urllib.parse
from typing import Dict, Any
from datetime import datetime

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        name = body_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message = body_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        if not phone or phone == '–ù–µ —É–∫–∞–∑–∞–Ω':
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}),
                'isBase64Encoded': False
            }
        
        notification_text = f'''üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –¢–ï–•–ü–†–û–ú–ú–û–ù–¢–ê–ñ

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë§ –ò–º—è: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}

---
Email: mihail-dutchak@mail.ru
'''
        
        log_message = f'–ó–ê–Ø–í–ö–ê | {datetime.now().strftime("%d.%m.%Y %H:%M")} | {name} | {phone} | {message}'
        print(log_message)
        
        import os
        telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN', '')
        telegram_chat_id = os.environ.get('TELEGRAM_CHAT_ID', '')
        
        if telegram_token and telegram_chat_id:
            telegram_url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'
            data = urllib.parse.urlencode({
                'chat_id': telegram_chat_id,
                'text': notification_text,
                'parse_mode': 'HTML'
            }).encode()
            
            req = urllib.request.Request(telegram_url, data=data)
            with urllib.request.urlopen(req, timeout=10) as response:
                telegram_response = response.read()
                print(f'Telegram sent: {telegram_response.decode()}')
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            }),
            'isBase64Encoded': False
        }
        
    except Exception as e:
        error_log = f'ERROR | {datetime.now().strftime("%d.%m.%Y %H:%M")} | {str(e)}'
        print(error_log)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            }),
            'isBase64Encoded': False
        }
