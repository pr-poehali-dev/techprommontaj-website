'''
Business: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞ –Ω–∞ email —á–µ—Ä–µ–∑ SMTP
Args: event - dict —Å httpMethod, body (name, phone, message)
      context - –æ–±—ä–µ–∫—Ç —Å request_id
Returns: HTTP response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
'''

import json
import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from typing import Dict, Any
from datetime import datetime

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        name = body_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message = body_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        if not phone or phone == '–ù–µ —É–∫–∞–∑–∞–Ω':
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}),
                'isBase64Encoded': False
            }
        
        log_message = f'–ó–ê–Ø–í–ö–ê | {datetime.now().strftime("%d.%m.%Y %H:%M")} | {name} | {phone} | {message}'
        print(log_message)
        
        gmail_user = os.environ.get('GMAIL_USER', 'Tehprommontaj@gmail.com')
        gmail_password = os.environ.get('GMAIL_PASSWORD', '')
        recipient_email = os.environ.get('MAIL_NAME', 'mihail-dutchak@mail.ru')
        
        if not gmail_password:
            print('Gmail –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö')
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({
                    'success': True,
                    'message': '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
                }),
                'isBase64Encoded': False
            }
        
        email_subject = f'üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –æ—Ç {name}'
        
        html_body = f'''<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; }}
        .container {{ max-width: 600px; margin: 20px auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #1e40af 0%, #f97316 100%); padding: 30px; text-align: center; color: white; }}
        .header h1 {{ margin: 0; font-size: 28px; font-weight: bold; }}
        .header p {{ margin: 5px 0 0 0; opacity: 0.9; font-size: 14px; }}
        .content {{ padding: 30px; }}
        .info-row {{ margin: 20px 0; padding: 15px; background: #f8fafc; border-left: 4px solid #f97316; border-radius: 5px; }}
        .info-label {{ font-size: 12px; color: #64748b; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px; }}
        .info-value {{ font-size: 16px; color: #1e293b; font-weight: 600; }}
        .message-box {{ background: #fff7ed; border: 2px solid #fed7aa; border-radius: 8px; padding: 20px; margin: 20px 0; }}
        .message-box .label {{ color: #c2410c; font-weight: 600; margin-bottom: 10px; }}
        .message-box .text {{ color: #431407; line-height: 1.6; }}
        .footer {{ background: #f1f5f9; padding: 20px; text-align: center; color: #64748b; font-size: 12px; }}
        .badge {{ display: inline-block; background: #22c55e; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öôÔ∏è –¢–ï–•–ü–†–û–ú–ú–û–ù–¢–ê–ñ</h1>
            <p>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</p>
            <span class="badge">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>
        </div>
        
        <div class="content">
            <p style="color: #64748b; font-size: 14px; margin-bottom: 20px;">
                üìÖ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}
            </p>
            
            <div class="info-row">
                <div class="info-label">üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</div>
                <div class="info-value">{name}</div>
            </div>
            
            <div class="info-row">
                <div class="info-label">üìû –¢–µ–ª–µ—Ñ–æ–Ω</div>
                <div class="info-value">{phone}</div>
            </div>
            
            <div class="message-box">
                <div class="label">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</div>
                <div class="text">{message if message != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ'}</div>
            </div>
            
            <div style="margin-top: 30px; padding: 15px; background: #ecfccb; border-radius: 8px; text-align: center;">
                <p style="margin: 0; color: #3f6212; font-weight: 600;">‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
            </div>
        </div>
        
        <div class="footer">
            <p style="margin: 5px 0;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            <p style="margin: 5px 0;">–¢–ï–•–ü–†–û–ú–ú–û–ù–¢–ê–ñ ¬© 2025</p>
        </div>
    </div>
</body>
</html>'''
        
        msg = MIMEMultipart('alternative')
        msg['From'] = gmail_user
        msg['To'] = recipient_email
        msg['Subject'] = email_subject
        msg.attach(MIMEText(html_body, 'html', 'utf-8'))
        
        with smtplib.SMTP('smtp.gmail.com', 587, timeout=10) as server:
            server.starttls()
            server.login(gmail_user, gmail_password)
            server.send_message(msg)
        
        print(f'Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å {gmail_user} –Ω–∞ {recipient_email}')
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            }),
            'isBase64Encoded': False
        }
        
    except Exception as e:
        error_log = f'–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò | {datetime.now().strftime("%d.%m.%Y %H:%M")} | {str(e)}'
        print(error_log)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            }),
            'isBase64Encoded': False
        }